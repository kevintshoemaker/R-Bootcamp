}
}
closeAllConnections()
}
rmd2rscript2("module1_4.Rmd")
rmd2rscript2("module2_1.Rmd")
rmd2rscript2("module2_2.Rmd")
rmd2rscript2("module2_3.Rmd")
rmd2rscript2("module2_4.Rmd")
rmd2rscript2("module2_5.Rmd")
install.packages("data.table")
as.data.table(mtcars)
library(data.table)
as.data.table(mtcars)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, warning = FALSE, message = FALSE)
####
####  Import data as a Tibble dataframe and take a quick glance
####
# import meteorological data from Hungry Horse (HH) and Polson Kerr (PK) dams as tibble dataframe using readr
clim_data <- read_csv("MTMetStations.csv")
# install.packages("tidyverse")
library(tidyverse)
####
####  Using the pipe operator %>% (ctrl-shift-m)
####
# start with a simple example
x <- 3
# calculate the log of x
log(x) # form f(x) is equivalent to
x %>% log() # form x %>% f
# example of multiple steps in pipe
round(log(x), digits=2) # form g(f(x)) is equivalent to
x %>% log() %>% round(digits=2) # form x %>% f %>%  g
####
####  Import data as a Tibble dataframe and take a quick glance
####
# import meteorological data from Hungry Horse (HH) and Polson Kerr (PK) dams as tibble dataframe using readr
clim_data <- read_csv("MTMetStations.csv")
# display tibble - note nice formatting and variable info, entire dataset is not displayed as is case in read.csv
clim_data
# display the last few lines of the data frame
tail(clim_data)
####
####  Use Tidyr verbs to make data 'tidy'
####
# look at clim_data -- is it in tidy format? What do we need to do to get it there?
head(clim_data)
# gather column names into a new column called 'climvar_station', and all of the numeric precip and temp values into a column called 'value'. By including -Date, we indicate that we don't want to gather this column.
clim_vars_longer <- clim_data %>% pivot_longer(
cols = !Date,
names_to = "climvar_station",
values_to = "value"
)
clim_vars_longer
# separate the climvar_station column into two separate columns that identify the climate variable and the station
clim_vars_separate <- clim_vars_longer %>% separate(
col = climvar_station,
into = c("Station","climvar")
)
clim_vars_separate
# pivot_wider distributes the clim_var column into separate columns, with the data values from the 'value' column
tidy_clim_data <- clim_vars_separate %>% pivot_wider(
names_from = climvar,
values_from = value
)
tidy_clim_data
# repeat above as single pipe series without creation of intermediate datasets
tidy_clim_data <- clim_data %>%
pivot_longer(cols = !Date,
names_to = "climvar_station",
values_to = "value") %>%
separate(col = climvar_station,
into = c("Station","climvar")) %>%
pivot_wider(names_from = climvar,
values_from = value)
tidy_clim_data
tidy_clim_data
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
########
# Load packages!
## note: if you don't already have these packages you will need to install them first!
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(carData)
library(DAAG)
library(RColorBrewer)
library(leaflet)
##############
# Load the example data!
data(Soils,package = "carData")    # load example data
#See what variables it contains...
soil <- data.frame(Soils)
head(soil)
########
# basic boxplot...
ggplot(soil) +
geom_boxplot(aes(x=Contour, y=pH))
###########
# basic scatterplot
ggplot(soil) +
geom_point(aes(x=pH, y=Ca))
########
# Color the points by depth
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, color=Depth))
head(iris)
ggplot(iris) +
geom_point(aes(x=Sepal.Length,y=Petal.Length))
ggplot(iris) +
geom_point(aes(x=Sepal.Length,y=Petal.Length,col="Species"))
ggplot(iris) +
geom_point(aes(x=Sepal.Length,y=Petal.Length,col=Species))
######
# Plot several relationships on same graphics window
ggplot(soil, aes(x=pH)) +
geom_point(aes(y=Ca), shape=21, fill="red", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Mg), shape=21, fill="blue", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Na), shape=21, fill="gray30", color="black", size=4, stroke=1.5)
ggplot(soil, aes(x=pH)) +
geom_point(aes(y=Ca), shape=21, fill="red", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Mg), shape=21, fill="blue", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Na), shape=21, fill="gray30", color="black", size=4, stroke=1.5)
######
# Plot several relationships on same graphics window
ggplot(soil, aes(x=pH)) +
geom_point(aes(y=Ca), shape=21, fill="red", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Mg), shape=21, fill="blue", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Na), shape=21, fill="gray30", color="black", size=4, stroke=1.5)
#########
# Use 'tidyverse' tricks to simplify the syntax for ggplot to color by nutrient
soil.nut <- pivot_longer(soil, cols=c("Ca","Mg","Na"), names_to="nutrient",values_to = "value" )
ggplot(soil.nut) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
######
# or if we wanted to plot different nutrients...
soil.nut2 <- pivot_longer(soil, cols=c("Ca","Mg","K"), names_to="nutrient",values_to = "value" )
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
########
# Try different themes!
## igray:
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_igray() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
## economist:
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_economist() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
## gdocs:
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_gdocs() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
############
# Playing with colors in ggplot!
display.brewer.all()
#########
# Choose a new color palette from the RColorBrewer package
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5) +
theme_bw() +
ylab("Ca (mg/100g soil)") +
scale_fill_brewer(palette="YlOrBr", name="Depth (cm)")
###########
# Adding density/smooth curves to plots
## first produce some histograms
ggplot(soil.nut) +
geom_histogram(aes(x=value), color="black", fill="white", bins=15) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_dark() +
theme(axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
########
# Then add density curves
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
geom_density(aes(x=value,color=nutrient), size=1.5) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_dark() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
###########
# And now let's use a statistical function (dnorm) in ggplot to compare with a normal distribution:
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
stat_function(fun = dnorm, color = "blue", size = 1.5,
args=list(mean=mean(soil.nut$value), sd=sd(soil.nut$value))) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_dark() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
leaflet(possumsites) %>%
addTiles() %>% #Adds map tiles from OpenStreetMap
addMarkers(lng=c(possumsites$Longitude), lat=c(possumsites$Latitude),
popup=c(as.character(possumsites$altitude))) #Adds markers for the sites
#Solution
ggplot(soil) +
geom_point(aes(pH, Ca, fill=Depth), shape=21, color='black', size=4, stroke=1.5) +
geom_smooth(method='lm', aes(pH, Ca, color=Depth), se=FALSE) +
theme_bw() +
ylab('Ca (mg/100g soil)') +
scale_fill_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'), name='Depth (cm)') +
scale_color_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'))
ggplot(soil) +
geom_point(aes(pH, Ca, fill=Depth), shape=21, color='black', size=4, stroke=1.5) +
geom_smooth(method='lm', aes(pH, Ca, color=Depth), se=FALSE) +
theme_bw() +
ylab('Ca (mg/100g soil)') +
scale_fill_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'), name='Depth (cm)') +
scale_color_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'))
ggplot(soil.nut) +
geom_boxplot(aes(nutrient, value, fill=Contour)) +
stat_summary(aes(nutrient, value),
fun=mean, geom="point", shape=18, size=4, color='black')
ggplot(soil.nut) +
geom_density(aes(x=value, fill=nutrient), color="black", alpha=0.5) +
xlab("mg / 100g soil") +
theme_dark() +
theme(axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
?"'"
mean.Date()
?mean.Date
Methods(‘mean’)
Methods(mean)
Methods(
)
methods(‘mean’)
methods("mean")
Methods("mean")
methods("mean")
?Methods
Primitive('sum')
.Primitive('sum')
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
myname <- 'Alfred'
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
##################################################
####                                          ####
####  R Bootcamp #1, Module 1                 ####
####                                          ####
####   University of Nevada, Reno             ####
####                                          ####
##################################################
## NOTE: this module borrows heavily from an R short course developed by a team at Colorado State University.
# Thanks to Perry Williams at UNR for allowing us to use these materials!!
##################################################
####  Getting started with R: the basics      ####
##################################################
myname <- 'Alfred'
###############
# R DEMO:
###############
#  don't worry if you don't understand this just yet- this is just a taste of where we are going!
#########
# load a built-in dataset
data(trees)
#########
# explore the data object
summary(trees)    # summary statistics for all variables in data frame
str(trees)        # summary of the data structure
#########
# visualize the data
# histograms:
layout(matrix(1:3,nrow=1,byrow = T))    # set up a multi-panel graphics device (three plots side by side)
hist(trees$Height)                       # visualize the distribution of height data
hist(trees$Girth)                        # visualize the distribution of girth data
hist(trees$Volume)                       # visualize the distribution of volume data
# bivariate scatterplots:
layout(matrix(1:2,nrow=1,byrow = T))      # set graphics device with 2 plots side by side
plot(trees$Volume~trees$Girth)            # scatterplot of volume against girth
plot(trees$Volume~trees$Height)           # scatterplot of volume against height
pairs(trees)    # plots all scatterplots together as a scatterplot matrix!
##########
# perform linear regression analysis
model1 <- lm(Volume~Girth,data=trees)        # regress Volume on Girth
summary(model1)    # examine the results
######
# test key assumptions visually
layout(matrix(1:4,nrow=2,byrow=T))  # set up graphics window
plot(model1)  # run diagnostic plots for our regression
#########
# visualize the results!
xvals <- seq(5,30,0.5)            # set the range of "Girth" values over which you want to make predictions about "Volume"
pred <- predict(model1,newdata=data.frame(Girth=xvals),interval = "confidence",level = 0.99)   # use the linear model to make predictions about "Volume"
plot(trees$Volume~trees$Girth,xlab="Girth (inches)",ylab="Volume (cubic feet)",main="Black Cherry",
xlim=range(xvals),ylim=c(0,100))         # Make a pretty scatterplot
abline(model1,lwd=2,col="brown")              # Add the regression line
lines(xvals,pred[,"upr"],col="brown",lty=2)       # Add the upper bound of the confidence interval
lines(xvals,pred[,"lwr"],col="brown",lty=2)       #      ... and the lower bound
text(10,80,sprintf("Volume = %s + %s*Girth",round(coefficients(model1)[1],1),round(coefficients(model1)[2],1)))       # Add the regression coefficients
text(10,65,sprintf("p = %s",round(summary(model1)$coefficients[,"Pr(>|t|)"][2],3)))     # Add the p-value
##################
####  Create R Objects
##################
#############
### scalars
#############
scalar1 <- 'this is a scalar'
scalar2 <- 104
scalar3 <- 5 + 6.5    # evaluates to the single value 11.5
scalar4 <- '4'
typeof(scalar4)    # returns: character
## what is this type?
scalar5 <- TRUE
typeof(scalar5)    # returns: logical
## what happens when we run this line of code? Think about the types.
scalar2 + scalar4
?sum
floor(67.2)
round(67.8)
round
help(round)
data.frame(x=c(1,2,3),y=c(3,4,5),z=c("a","a","b")
)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
##################################################
####                                          ####
####  R Bootcamp #1, Module 1                 ####
####                                          ####
####   University of Nevada, Reno             ####
####                                          ####
##################################################
## NOTE: this module borrows heavily from an R short course developed by a team at Colorado State University.
# Thanks to Perry Williams at UNR for allowing us to use these materials!!
##################################################
####  Getting started with R: the basics      ####
##################################################
myname <- 'Alfred'
###############
# R DEMO:
###############
#  don't worry if you don't understand this just yet- this is just a taste of where we are going!
#########
# load a built-in dataset
data(trees)
#########
# explore the data object
summary(trees)    # summary statistics for all variables in data frame
str(trees)        # summary of the data structure
#########
# visualize the data
# histograms:
layout(matrix(1:3,nrow=1,byrow = T))    # set up a multi-panel graphics device (three plots side by side)
hist(trees$Height)                       # visualize the distribution of height data
hist(trees$Girth)                        # visualize the distribution of girth data
hist(trees$Volume)                       # visualize the distribution of volume data
# bivariate scatterplots:
layout(matrix(1:2,nrow=1,byrow = T))      # set graphics device with 2 plots side by side
plot(trees$Volume~trees$Girth)            # scatterplot of volume against girth
plot(trees$Volume~trees$Height)           # scatterplot of volume against height
pairs(trees)    # plots all scatterplots together as a scatterplot matrix!
##########
# perform linear regression analysis
model1 <- lm(Volume~Girth,data=trees)        # regress Volume on Girth
summary(model1)    # examine the results
######
# test key assumptions visually
layout(matrix(1:4,nrow=2,byrow=T))  # set up graphics window
plot(model1)  # run diagnostic plots for our regression
#########
# visualize the results!
xvals <- seq(5,30,0.5)            # set the range of "Girth" values over which you want to make predictions about "Volume"
pred <- predict(model1,newdata=data.frame(Girth=xvals),interval = "confidence",level = 0.99)   # use the linear model to make predictions about "Volume"
plot(trees$Volume~trees$Girth,xlab="Girth (inches)",ylab="Volume (cubic feet)",main="Black Cherry",
xlim=range(xvals),ylim=c(0,100))         # Make a pretty scatterplot
abline(model1,lwd=2,col="brown")              # Add the regression line
lines(xvals,pred[,"upr"],col="brown",lty=2)       # Add the upper bound of the confidence interval
lines(xvals,pred[,"lwr"],col="brown",lty=2)       #      ... and the lower bound
text(10,80,sprintf("Volume = %s + %s*Girth",round(coefficients(model1)[1],1),round(coefficients(model1)[2],1)))       # Add the regression coefficients
text(10,65,sprintf("p = %s",round(summary(model1)$coefficients[,"Pr(>|t|)"][2],3)))     # Add the p-value
#############
### functions
#############
sum(1, 2, 3, 10)    # returns: 15
c(1, 2, 3, 10)   # combine four numbers into a single data object (a vector!)
floor(67.8)  # removes the decimal component of a number
round(67.8)  # rounds a number
round     # oops, we forgot to add parenthesis!
help(round)  # a function for getting help with functions!!
?round         # shortcut for the 'help' function
##################
####  Create R Objects
##################
#############
### scalars
#############
scalar1 <- 'this is a scalar'
scalar2 <- 104
scalar3 <- 5 + 6.5    # evaluates to the single value 11.5
scalar4 <- '4'
typeof(scalar4)    # returns: character
## what is this type?
scalar5 <- TRUE
typeof(scalar5)    # returns: logical
#############
### VECTORS
#############
vector1 <- c(1.1, 2.1, 3.1, 4)   # the "c()" function combines smaller data objects into a larger object
vector2 <- c('a', 'b', 'c')
vector3 <- c(TRUE, 'a', 1)
a <- 1
b <- 2
c <- c(3,4)
myvec <- c(a, b, c)   # create a vector from existing data objects
myvec
length(myvec)    # the "length()" function returns the number of elements in a vector
d1 <- myvec           # copy the vector "myvec"
d2 <- myvec+3         # add 3 to all elements of the vector "myvec"
d3 <- d1+d2           # elementwise addition
d4 <- d1+c(1,2)       # what does this do?
## inspect the objects by calling them in the console (or script window)
d1    # returns: 1 2 3
d2    # returns: 4 5 6
d3    # returns: 5 7 9
d4    # returns: 2 4 4
#############
### MATRICES
#############
mymat <- cbind(d1,d2)        # create a matrix by binding vectors, with vector d1 as column 1 and d2 as column 2
mymat
class(mymat)   # confirm that the new object "mymat" is a matrix using the 'class()' function
mymat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2)        # create matrix another way (stack columns together)
mymat
mymat <- matrix(c(1,2,3,4,5,6),nrow=3,ncol=2,byrow=T)        # create matrix another way (stack rows together)
mymat
mymat <- rbind(c(1,4),c(2,5),c(3,6))        # create matrix another way (stacking three vectors on top of one another)
mymat
# math with matrices
mymat + 2
mymat/sum(mymat)
#############
### LISTS
#############
mylist <- list()        # create empty list
mylist[[1]] <- c(1,2,3)     # note the double brackets- this is one way to reference list elements.
mylist[[2]] <- c(4,5)
mylist[[3]] <- "Alfred"
mylist
#############
### DATA FRAMES
#############
mydf <- data.frame(col1=c(1,2,3),colW2=c(4,5,6))        # create a ‘data frame’ with two columns. Each column is a vector of length 3
mydf
names(mydf)          # view or change column names
names(mydf)=c("meas_1","meas_2")        # provide new names for columns
mydf
rownames(mydf) <- c("obs1","obs2","obs3")
mydf
seq(0,1,length=5)          # sequence of length 10 between 0 and 1
my.data <- data.frame(
Obs.Id = 1:100,
Treatment = rep(c("A","B","C","D","E"),each=20),
Block = rep(1:20,times=5),
Germination = rpois(100,lambda=rep(c(1,5,4,7,1),each=20)),   # random poisson variable
AvgHeight = rnorm(100,mean=rep(c(10,30,31,25,35,7),each=20))
)
head(my.data)
summary(my.data)    # Use the "summary()" function to summarize each column in the data frame.
d <- matrix(1:6,nrow=3,ncol=2)
d
d[,2]                # 2nd column of d
d[2,]                # 2nd row of d
d[2:3,]        # 2nd and 3rd rows of d in a matrix
'+'(2,3)
mymat
unlink("module1_1_cache", recursive = TRUE)
