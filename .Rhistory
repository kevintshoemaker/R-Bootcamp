rm(data.txt.df)
?saveRDS
saveRDS(b, "Myobject1.rds")
a <- 1
b <- data.df$Product
saveRDS(b, "Myobject1.rds")
save(a,b,file="Myworkspace.RData")
rm(a,b)   # remove these objects from the environment
readRDS("Myobject1.rds")
new_b <- readRDS("Myobject1.rds")
load("Module1_2.RData")   # load these objects back in!
rm(list=ls())   # clear the entire environment. Confirm that your environment is now empty!
data.df <- read_csv("data.csv")  # read the data back in!
turtles.df <- read_delim(file="turtle_data.txt")
turtles.df
turtles.df <- read_delim(file="turtle_data.txt", delim="\t")
turtles.df
turtles.df <- read_delim(file="turtle_data.txt", delim=c(",","\t"))
turtles.df
turtles.df <- read_delim(file="turtle_data.txt", delim=c(",","\t"))
turtles.df <- read_delim(file="turtle_data.txt", delim=c(" ","\t"))
turtles.df
turtles.df <- read_delim(file="turtle_data.txt", delim=c(" ","\t"))
turtles.df
turtles.df <- read_table(file="turtle_data.txt")
turtles.df
#  Practice subsetting a data frame ------------------------
read.table("turtle_data.txt",sep="\t")
#  Practice subsetting a data frame ------------------------
read_tsv("turtle_data.txt")
turtles.df <- read_delim(file="turtle_data.txt",delim="\t")
turtles.df
#  Practice subsetting a data frame ------------------------
turtles.df <- read_delim(file="turtle_data.txt",delim="\t")   # tab-delimited file
turtles.df
fem.turtles.df = turtles.df %>%
filter(sex=="female")
# Here we want to know the mean weight of all females
mean(fem.turtles.df$weight)
turtles.df %>%
group_by(sex) %>%
summarize(meanwt = mean(weight))
unique(turtles.df$sex)  # note the two ways of representing females...
turtles.df$sex[turtles.df$sex=="fem"] <- "female"  # correct the error
# or alternatively using more tidyverse-y syntax
turtles.df = turtles.df %>%
mutate(sex = replace(sex,sex=="fem","female"))
turtles.df %>%          # summarize weight by sex
group_by(sex) %>%
summarize(meanwt = mean(weight))
turtles.df %>%          # summarize weight by sex
group_by(sex) %>%
summarize(meanwt = mean(weight))
subset.turtles.df <- turtles.df %>%
filter(weight >= 10)
subset.turtles.df
?across
?replace
turtles.df = turtles.df %>%
mutate(across("sex","carapace_length","head_width","weight"),replace(.x,tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across("sex","carapace_length","head_width","weight"),replace(.,tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across("sex","carapace_length","head_width","weight"),~replace(.x,tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across("sex","carapace_length","head_width","weight"),~replace(.,tag_number%in%bad.tags,NA))
starwars %>% mutate(across(c("height", "mass"), ~ scale2(.x, na.rm = TRUE)))
rlang::last_error()
starwars
starwars %>% mutate(across(c("height", "mass"), ~scale2(.x, na.rm = TRUE)))
scale2 <- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm)
starwars %>% mutate(across(c("height", "mass"), ~scale2(.x, na.rm = TRUE)))
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),~replace(.x,tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),~replace(tag_number%in%bad.tags,NA))
~scale2()
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),~replace(..1,tag_number%in%bad.tags,NA))
,tag_number%in%bad.tags
tag_number%in%bad.tags
turtles.df$tag_number%in%bad.tags
# list of tags we do not trust the data for
bad.tags <- c(13,105)
turtles.df = turtles.df %>%
mutate(
sex = replace(sex,tag_number%in%bad.tags,NA),
carapace_length = replace(carapace_length,tag_number%in%bad.tags,NA),
head_width = replace(head_width,tag_number%in%bad.tags,NA),
weight = replace(weight,tag_number%in%bad.tags,NA)
)
subset.turtles.df <- turtles.df %>%
filter(weight >= 10)
subset.turtles.df
# list of tags we do not trust the data for
bad.tags <- c(13,105)
subset.turtles.df <- turtles.df %>%
filter(weight >= 10)
subset.turtles.df
fem.turtles.df = turtles.df %>%
filter(sex=="female")
# Here we want to know the mean weight of all females
mean(fem.turtles.df$weight)
turtles.df %>%
group_by(sex) %>%
summarize(meanwt = mean(weight))
unique(turtles.df$sex)  # note the two ways of representing females...
turtles.df$sex[turtles.df$sex=="fem"] <- "female"  # correct the error
# or alternatively using more tidyverse-y syntax
turtles.df = turtles.df %>%
mutate(sex = replace(sex,sex=="fem","female"))
turtles.df %>%          # summarize weight by sex (check that it's fixed)
group_by(sex) %>%
summarize(meanwt = mean(weight))
### Fixing data using subsetting
Like we saw in the previous example (correcting the 'sex' variable) we can use subsetting operations to correct or alter data:
# list of tags we do not trust the data for
bad.tags <- c(13,105)
turtles.df = turtles.df %>%
mutate(
sex = replace(sex,tag_number%in%bad.tags,NA),
carapace_length = replace(carapace_length,tag_number%in%bad.tags,NA),
head_width = replace(head_width,tag_number%in%bad.tags,NA),
weight = replace(weight,tag_number%in%bad.tags,NA)
)
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),replace(.,.tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),~replace(.,.tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),~.=replace(.,tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),~replace(.,tag_number%in%bad.tags,NA))
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),function(x) replace(x,tag_number%in%bad.tags,NA))
function(x) replace(x,tag_number%in%bad.tags,NA)
f1 <- function(x) replace(x,tag_number%in%bad.tags,NA)
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),f1)
f1 <- function(x) replace(x,turtles.df$tag_number%in%bad.tags,NA)
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight),f1)
f1 <- function(x) replace(x,turtles.df$tag_number%in%bad.tags,NA)
turtles.df = turtles.df %>%
mutate(across(sex,carapace_length,head_width,weight,
~replace(.x,tag_number%in%bad.tags,NA)))
turtles.df = turtles.df %>%
mutate(across(c("sex","carapace_length","head_width","weight"),
~replace(.x,tag_number%in%bad.tags,NA)))
turtles.df
missing.df %>%
mutate(Export = replace_na(Export,mean(Export,na.rm=T)),
Import = replace_na(Import,mean(Import,na.rm=T)))
missing.df <- read_delim(file="data_missing.txt",delim="\t")   # try replacing with "read_table"- it does not work right!
# Missing data are read as an NA
missing.df
# Omits (removes) rows with missing data
na.omit(missing.df)
complete.cases(missing.df)   # Boolean: for each row, tests if there are no NA values
missing.df %>%
mutate(Export = replace_na(Export,mean(Export,na.rm=T)),
Import = replace_na(Import,mean(Import,na.rm=T)))
missing.df
# or using tidyverse trickery:
missing.df %>%
mutate(across(where(is.numeric),~replace_na(.,mean(.,na.rm=T))))
# Can summarize your data and tell you how many NA's per col
summary(missing.df)
?ggplot
# try representing tree height using the size aesthetic
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point(aes(size=Height))
# Explore different "geoms" or plot types ----------------
plot1 <- ggplot(trees,aes(Girth,Volume)) +    # plot the relationship as a line
geom_line()
plot2 <- ggplot(trees,aes(Girth,Volume)) +    # plot a smoothed "spline" fit of the relationship
geom_smooth()
plot3 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot
geom_point()
plot4 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot with smoothed regression line
geom_point() +
geom_smooth()
plot_grid(plot1,plot2,plot3,plot4,labels="auto")
# Explore different aesthetic mappings ---------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # shape represents species
geom_point(aes(shape=Species))
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=2)
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="purple")
plot5 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size represents species
geom_point(aes(size=Species))
plot6 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size is same across the board
geom_point(size=2)
plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,ncol=2)
# bar plots and box-whisker plots -----------------------
plot1 <- ggplot(iris,aes(x=Species,y=Sepal.Length)) +    # more informative box-whisker plot
geom_boxplot()
plot2 <- ggplot(iris,aes(x=Species,y=Sepal.Length)) +    # more informative box-whisker plot +
geom_violin()
# bar plot
bar.heights <- iris %>%
group_by(Species) %>%
summarize(meanSL = mean(Sepal.Length))
plot3 <- ggplot(bar.heights, aes(Species,meanSL)) +
geom_col()
plot4 <- ggplot(bar.heights, aes(Species,meanSL)) +
geom_col(aes(fill=Species)) +
theme_classic() +
scale_fill_manual(values=c("gray","red","brown"))
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# Bar plot with error bars ------------------------
bar.heights <- iris %>%
group_by(Species) %>%
summarize(meanSL = mean(Sepal.Length),
n = n(),
sdSL = sd(Sepal.Length),
se = sdSL/sqrt(n))
ggplot(bar.heights,aes(x=Species,y=meanSL)) +
geom_col(fill=gray(0.7),color="black") +
geom_errorbar(aes(ymin=meanSL-2*sdSL,ymax=meanSL+2*sdSL),width=.2) +
labs(y="Sepal Length")
# ?ToothGrowth
head(ToothGrowth)
# toothgrowth plot -------------------
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
sumTC <- ToothGrowth %>%
group_by(supp,dose) %>%
summarize(mean = mean(len),
sd = sd(len))
p<- ggplot(sumTC, aes(x=dose, y=mean, fill=supp)) +
geom_col(color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(0.9)) +
labs(title="Tooth growth", x="Dose (mg)", y = "Length") +
theme_classic() +
scale_fill_manual(values=c('#999999','#E69F00'))
print(p)
# More complex example -----------------------------
library(ggthemes)
library(carData)
library(DAAG)
library(RColorBrewer)
library(leaflet)
# Load the example data -----------------------
soil <- carData::Soils    # load example data
#See what variables it contains...
head(soil)    # plot out the first few lines...
# basic boxplot and violin plot
plot1 <- ggplot(soil) +
geom_boxplot(aes(x=Contour, y=pH))
plot2 <- ggplot(soil) +
geom_violin(aes(x=Contour, y=pH))
plot_grid(plot1,plot2,labels = "AUTO")
# basic scatterplot
ggplot(soil) +
geom_point(aes(x=pH, y=Ca))
# Load the example data -----------------------
soil <- carData::Soils    # load example data
#See what variables it contains...
head(soil)    # plot out the first few lines...
# basic boxplot and violin plot
plot1 <- ggplot(soil) +
geom_boxplot(aes(x=Contour, y=pH))
plot2 <- ggplot(soil) +
geom_violin(aes(x=Contour, y=pH))
plot_grid(plot1,plot2,labels = "AUTO")
########
# Color the points by depth
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, color=Depth))
##########
# make additional alterations (outside the "aes" function)
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5)
##########
# make additional alterations (outside the "aes" function)
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1)
##########
# make additional alterations (outside the "aes" function)
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=.5)
##########
# make additional alterations (outside the "aes" function)
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5)
######
# Plot several relationships on same graphics window
ggplot(soil, aes(x=pH)) +
geom_point(aes(y=Ca), shape=21, fill="red", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Mg), shape=21, fill="blue", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Na), shape=21, fill="gray30", color="black", size=4, stroke=1.5)
soils
soil
soil.nut <- pivot_longer(soil, cols=c("Ca","Mg","Na"), names_to="nutrient",values_to = "value" )
soil.nut
ggplot(soil.nut) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
# Use 'tidyverse' to reshape the data  ---------------
soil.nut <- pivot_longer(soil, cols=c("Ca","Mg","Na"), names_to="nutrient",values_to = "value" )
soil.nut
ggplot(soil.nut) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
######
# or if we wanted to plot different nutrients...
soil.nut2 <- pivot_longer(soil, cols=c("Ca","Mg","K"), names_to="nutrient",values_to = "value" )
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
?ylab
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=25),
axis.title = element_text(size=30),
strip.text = element_text(size=30, face="bold"))
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=25),
axis.title = element_text(size=30),
strip.text = element_text(size=30, face="bold"))
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
## economist:
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_economist() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
########
# Try different themes!
## igray:
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_igray() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_gdocs() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
############
# Playing with colors in ggplot!
display.brewer.all()
?scale_fill_brewer
#########
# Choose a new color palette from the RColorBrewer package
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5) +
theme_classic() +
labs(y="Ca (mg/100g soil)") +
scale_fill_brewer(palette="YlOrBr", name="Depth (cm)")
#########
# Choose your own palette!
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5) +
theme_bw() +
ylab("Ca (mg/100g soil)") +
scale_fill_manual(values=c("#FFF0BF","#FFC300","#BF9200","#604900"), name="Depth (cm)")
##########
# add trendlines
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
geom_smooth(aes(x=pH, y=value), method="lm", color="black") +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
###########
# Adding density/smooth curves to plots
## first produce some histograms
ggplot(soil.nut) +
geom_histogram(aes(x=value), color="black", fill="white", bins=15) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
###########
# Adding density/smooth curves to plots
## first produce some histograms
ggplot(soil.nut) +
geom_histogram(aes(x=value), color="black", fill="white", bins=15) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
########
# Then add density curves
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
geom_density(aes(x=value,color=nutrient), size=1.5) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
###########
# And now let's use a statistical function (dnorm) in ggplot to compare with a normal distribution:
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
stat_function(fun = dnorm, color = "blue", size = 1.5,
args=list(mean=mean(soil.nut$value), sd=sd(soil.nut$value))) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2)
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot()
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
source("~/.active-rstudio-document", echo=TRUE)
