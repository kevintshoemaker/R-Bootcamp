fem.turtles.df = turtles.df %>%
filter(sex=="female")
fem.turtles.df
turtles.df %>%
group_by(sex) %>%
summarize(meanwt = mean(weight))
unique(turtles.df$sex)
turtles.df$sex[turtles.df$sex=="fem"] <- "female"
turtles.df$sex[turtles.df$sex=="fem"] <- "female"  # correct the error
unique(turtles.df$sex)  # note the two ways of representing females...
turtles.df %>%          # summarize weight by sex
group_by(sex) %>%
summarize(meanwt = mean(weight))
subset.turtles.df <- turtles.df %>%
filter(weight >= 10)
head(subset.turtles.df)
subset.turtles.df
View(turtles.df)
turtles.df[turtles.df%in%bad.tags,]
# list of tags we do not trust the data for
bad.tags <- c(13,105)
turtles.df[turtles.df%in%bad.tags,]
turtles.df[turtles.df$tag_number%in%bad.tags,]
turtles.df
turtles.df[turtles.df$tag_number%in%bad.tags,c("sex","carapace_length","head_widgth","weigth")]
turtles.df[turtles.df$tag_number%in%bad.tags,c("sex","carapace_length","head_widgth","weight")]
turtles.df[turtles.df$tag_number%in%bad.tags,c("sex","carapace_length","head_width","weight")]
turtles.df[turtles.df$tag_number%in%bad.tags,c("sex","carapace_length","head_width","weight")]  <- NA
turtles.df
turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight >= 6 ~ "adult",
is.na(weight) ~ NA,
TRUE  ~ "subadult"
))
turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ NA,
TRUE  ~ "subadult"
))
turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
#is.na(weight) ~ NA,
TRUE  ~ "subadult"
))
?case_when
turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ "unknown",
TRUE  ~ "subadult"
))
turtles.df = turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ "unknown",
TRUE  ~ "subadult"
))
turtles.df = turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ "<NA>",
TRUE  ~ "subadult"
))
turtles.df = turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ "NA",
TRUE  ~ "subadult"
))
turtles.df = turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ NA,
TRUE  ~ "subadult"
))
NA_character_
turtles.df = turtles.df %>%
mutate(size.class = case_when(
weight < 3 ~ "juvenile",
weight > 6 ~ "adult",
is.na(weight) ~ NA_character_,
TRUE  ~ "subadult"
))
turtles.df$size.class
# To sort a data frame by one vector, you can use "order()"
turtles.df[order(turtles.df$tag_number),]
# The 'order' function returns the indices of the original (unsorted) vector in the order that they would appear if properly sorted
order(turtles.df$carapace_length)
# To sort a data frame by one vector, you can use "order()"
turtles.df[order(turtles.df$tag_number),]
turtles.df %>%
arrange(carapace_length)
turtles.df %>%
arrange(desc(carapace_length))
turtles.df %>%
arrange(sex,weight)
# If you specify the header and what the text is delimited by, it will read them as NA
missing.df <- read_table(file="data_missing.txt")
# Missing data is read as an NA
missing.df
# Omits (removes) rows with missing data
missing.NArm.df <- na.omit(missing.df)
missing.NArm.df
# ?is.na   (Boolean test!)
is.na(missing.df)
# ?is.na   (Boolean test!)
is.na(missing.df)
library(zoo)
?na.approx
missing.df %>%
mutate(Product = na.approx(Product))
missing.df
View(missing.df)
na.approx(missing.df$Product)
missing.df$Product
na.fill(missing.df$Product,
"A")
na.fill(missing.df$Product,"A")
na.fill(missing.df$Product,"B")
missing.df %>%
mutate(Product = na.fill(Product,"A"))
View(data.df)
# If you specify the header and what the text is delimited by, it will read them as NA
missing.df <- read_table(file="data_missing.txt")
# If you specify the header and what the text is delimited by, it will read them as NA
missing.df <- read_delim(file="data_missing.txt",delim="\t")
# Omits (removes) rows with missing data
na.omit(missing.df)
# ?is.na   (Boolean test!)
is.na(missing.df)
missing.df %>%
mutate(Export = na.approx(Product))
missing.df %>%
mutate(Export = na.approx(Export))
missing.df %>%
mutate(Export = na.approx(Export),
Import = na.approx(Import))
missing.df %>%
mutate(Export = na.approx(Export),
Import = na.approx(Import))
na.approx(missing.df$Import)
missing.df %>%
mutate( #Export = na.approx(Export),
Import = na.approx(Import))
missing.df %>%
mutate(Exp = na.approx(Export),
Imp = na.approx(Import))
missing.df %>%
mutate(Export = na.fill(Export,mean(Export,na.rm=T)),
Import = na.fill(Import,mean(Import,na.rm=T)))
complete.cases(missing.df)
# Can summarize your data and tell you how many NA's per col
summary(missing.df)
dput(mtcars)
structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), row.names = c("Mazda RX4", "Mazda RX4 Wag",
"Datsun 710", "Hornet 4 Drive", "Hornet Sportabout", "Valiant",
"Duster 360", "Merc 240D", "Merc 230", "Merc 280", "Merc 280C",
"Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
sessioninfo::session_info()
ggplot2::mpg
data.frame
knitr::opts_chunk$set(echo = TRUE)
rmd2rscript <- function(infile="module1_1.Rmd"){    # function for converting markdown to scripts
outfile1 <- gsub(".Rmd",".R",infile)
outfile2 <- gsub(".Rmd",".txt",infile)
close( file( outfile1, open="w" ) )   # clear output file
close( file( outfile2, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile1,"w")
con3 <- file(outfile2,"w")
stringToFind <- "```{r*"
isrblock <- FALSE
count=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
if(isrblock){
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if(count>1){
write(newline,file=con2,append=TRUE)
write(newline,file=con3,append=TRUE)
}
count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2 <- function(infile="LECTURE2.Rmd"){    # function for converting markdown to scripts
outfile <- gsub(".Rmd",".R",infile)
close( file( outfile, open="w" ) )   # clear output file
con1 <- file(infile,open="r")
con2 <- file(outfile,"w")
stringToFind <- "```{r*"
stringToFind2 <- "echo"
isrblock <- FALSE
#count=0
blocknum=0
while(length(input <- readLines(con1, n=1)) > 0){   # while there are still lines to be read
isrblock <- grepl(input, pattern = stringToFind, perl = TRUE)   # is it the start of an R block?
showit <- !grepl(input, pattern = stringToFind2, perl = TRUE)   # is it hidden (echo=FALSE)
if(isrblock){
blocknum=blocknum+1
while(!grepl(newline<-readLines(con1, n=1),pattern="```",perl=TRUE)){
if((blocknum>1)&((showit)|(blocknum==2))) write(newline,file=con2,append=TRUE)
#count=count+1
}
isrblock=FALSE
}
}
closeAllConnections()
}
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_1.Rmd")
rmd2rscript2("module1_2.Rmd")
rmd2rscript2("module1_2.Rmd")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
library(ggplot2)
library(cowplot)
library(tidyverse)
# try representing tree height using the color aesthetic
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point(aes(col=Height))
# try adding a regression line
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point() +
geom_smooth(method="lm")
plot1 <- ggplot(trees,aes(Girth,Volume)) +    # plot the s
geom_line()
plot1
plot2 <- ggplot(trees,aes(Girth,Volume)) +    # plot a smoothed "spline" fit of the relationship
geom_smooth()
plot2
plot_grid(plot1,plot2,plot3,plot4)
plot1 <- ggplot(trees,aes(Girth,Volume)) +    # plot the relationship as a line
geom_line()
plot2 <- ggplot(trees,aes(Girth,Volume)) +    # plot a smoothed "spline" fit of the relationship
geom_smooth()
plot3 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot
geom_points()
plot4 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot with smoothed regression line
geom_points() +
geom_smooth()
plot3 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot
geom_point()
plot4 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot with smoothed regression line
geom_points() +
geom_smooth()
plot4 <- ggplot(trees,aes(Girth,Volume)) +    # plot scatterplot with smoothed regression line
geom_point() +
geom_smooth()
plot_grid(plot1,plot2,plot3,plot4)
?plot_grid
plot_grid(plot1,plot2,plot3,plot4,labels="auto")
ggplot(trees,aes(Girth,Volume)) +    #
geom_point(aes(pch=Height))
ggplot(trees,aes(Girth,Volume)) +    #
geom_point(aes(shape=Height))
iris
?iris
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    #
geom_point(aes(shape=Species))
ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=20)
ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=2)
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="lightblue")
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="lightbrown")
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="purple")
# Explore different aesthetic mappings ---------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # shape represents species
geom_point(aes(shape=Species))
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=2)
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="purple")
plot5 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size represents species
geom_point(aes(size=Species))
plot6 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size is same across the board
geom_point(size=2)
plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,labels="auto")
# Explore different aesthetic mappings ---------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # shape represents species
geom_point(aes(shape=Species))
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=2)
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="purple")
plot5 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size represents species
geom_point(aes(size=Species))
plot6 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size is same across the board
geom_point(size=2)
plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,labels="auto",ncol=2)
# Explore different aesthetic mappings ---------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # shape represents species
geom_point(aes(shape=Species))
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=2)
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="purple")
plot5 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size represents species
geom_point(aes(size=Species))
plot6 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size is same across the board
geom_point(size=2)
plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,ncol=2)
?cowplot::theme_cowplot
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_cowplot(font_size = 12)
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_cowplot(font_size = 10)
?theme_cowplot
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_bw()
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_void()
# explore themes -----------------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_bw()
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_dark()
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal()
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_void()
plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,labels = "AUTO")
# explore themes -----------------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_bw()
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_dark()
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal()
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_void()
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# explore themes -----------------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_bw()
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_dark()
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal()
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal_grid()
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# explore themes -----------------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_bw()
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_dark()
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal()
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal_grid(font_size = 11)
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
coord_cartesian(xlim=c(0,10),ylim=c(0,10))
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)")
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)")
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.")
ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
?labs
# add additional plot elements: title, axis limis, axis labels ------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)")
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.")
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
coord_cartesian(xlim=c(0,10),ylim=c(0,10))
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# add additional plot elements: title, axis limis, axis labels ------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)")
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.")
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
coord_cartesian(xlim=c(0,10),ylim=c(0,10)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
coord_cartesian(xlim=c(0,10),ylim=c(0,10)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
plot4
## calculate the mean Sepal Length of for each species
bar.heights <- iris %>%
group_by(Species) %>%
summarize(meanSL = mean(Sepal.Length))
bar.heights
ggplot(bar.heights,aes(x=meanSL)) +
geom_bar()
# The basic 'barplot()' function
barplot(bar.heights, stat=stat_identity())
ggplot(iris,aes(x=Sepal.Length)) +
geom_bar()
ggplot(iris,aes(x=Sepal.Length,y=Species)) +
geom_col()
ggplot(iris,aes(x=Sepal.Length,y=Species)) +
geom_col() +
coord_flip()
ggplot(iris,aes(x=Sepal.Length,y=Species)) +
geom_box()
ggplot(iris,aes(x=Sepal.Length,y=Species)) +
geom_boxplot()
