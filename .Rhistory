geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
geom_density(aes(x=value,color=nutrient), size=1.5) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
###########
# And now let's use a statistical function (dnorm) in ggplot to compare with a normal distribution:
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
stat_function(fun = dnorm, color = "blue", size = 1.5,
args=list(mean=mean(soil.nut$value), sd=sd(soil.nut$value))) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2)
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot()
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
#  R Bootcamp #1, Module 3  -----------------------------
#      University of Nevada, Reno
#  Data visualization and statistics ----------------------
library(ggplot2)
library(cowplot)
library(tidyverse)
# ?trees      # description of built in dataset  (uncomment to run)
dim(trees)   # Show the dimension of the trees dataframe
str(trees)   # Show the structure of the trees dataframe
head(trees)   # Show the first few observations of the trees dataframe
summary(trees)  # Summary stats for each column
# scatterplot
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point()
# try representing tree height using the color aesthetic
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point(aes(col=Height))
# try representing tree height using the size aesthetic
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point(aes(size=Height))
# try adding a regression line
ggplot(trees, aes(x=Girth,y=Volume)) +
geom_point() +
geom_smooth(method="lm")
# Explore different aesthetic mappings ---------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # shape represents species
geom_point(aes(shape=Species))
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +       # shape is same for everything!
geom_point(shape=2)
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species))
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color is same across the board
geom_point(col="purple")
plot5 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size represents species
geom_point(aes(size=Species))
plot6 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # size is same across the board
geom_point(size=2)
plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,ncol=2)
# explore themes -----------------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_bw()
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_classic()
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal()
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
theme_minimal_grid(font_size = 11)
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# note: many other themes are available in ggplot, cowplot and other related packages
# add additional plot elements: title, axis limis, axis labels ------------------
plot1 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)")
plot2 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.")
plot3 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
plot4 <- ggplot(iris,aes(Sepal.Length,Petal.Length)) +    # color represents species
geom_point(aes(color=Species)) +
coord_cartesian(xlim=c(0,10),ylim=c(0,10)) +
labs(x="Sepal Length (cm)",y="Petal Length (cm)",color="Iris sp.",
title="Fisher's Iris Data",subtitle = "practice with ggplot")
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# bar plots and box-whisker plots -----------------------
plot1 <- ggplot(iris,aes(x=Species,y=Sepal.Length)) +    # more informative box-whisker plot
geom_boxplot()
plot2 <- ggplot(iris,aes(x=Species,y=Sepal.Length)) +    # more informative box-whisker plot +
geom_violin()
# bar plot
bar.heights <- iris %>%
group_by(Species) %>%
summarize(meanSL = mean(Sepal.Length))
plot3 <- ggplot(bar.heights, aes(Species,meanSL)) +
geom_col()
plot4 <- ggplot(bar.heights, aes(Species,meanSL)) +
geom_col(aes(fill=Species)) +
theme_classic() +
scale_fill_manual(values=c("gray","red","brown"))
plot_grid(plot1,plot2,plot3,plot4,labels = "AUTO")
# Bar plot with error bars ------------------------
bar.heights <- iris %>%
group_by(Species) %>%
summarize(meanSL = mean(Sepal.Length),
n = n(),
sdSL = sd(Sepal.Length),
se = sdSL/sqrt(n))
ggplot(bar.heights,aes(x=Species,y=meanSL)) +
geom_col(fill=gray(0.7),color="black") +
geom_errorbar(aes(ymin=meanSL-2*sdSL,ymax=meanSL+2*sdSL),width=.2) +
labs(y="Sepal Length")
# ?ToothGrowth
head(ToothGrowth)
# toothgrowth plot -------------------
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
sumTC <- ToothGrowth %>%
group_by(supp,dose) %>%
summarize(mean = mean(len),
sd = sd(len))
p<- ggplot(sumTC, aes(x=dose, y=mean, fill=supp)) +
geom_col(color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
position=position_dodge(0.9)) +
labs(title="Tooth growth", x="Dose (mg)", y = "Length") +
theme_classic() +
scale_fill_manual(values=c('#999999','#E69F00'))
print(p)
# More complex example -----------------------------
library(ggthemes)
library(carData)
library(DAAG)
library(RColorBrewer)
# Load the example data -----------------------
soil <- carData::Soils    # load example data
#See what variables it contains...
head(soil)    # plot out the first few lines...
# basic boxplot and violin plot
plot1 <- ggplot(soil) +
geom_boxplot(aes(x=Contour, y=pH))
plot2 <- ggplot(soil) +
geom_violin(aes(x=Contour, y=pH))
plot_grid(plot1,plot2,labels = "AUTO")
# basic scatterplot
ggplot(soil) +
geom_point(aes(x=pH, y=Ca))
########
# Color the points by depth
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, color=Depth))
##########
# make additional alterations (outside the "aes" function)
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5)
######
# Plot several relationships on same graphics window
ggplot(soil, aes(x=pH)) +
geom_point(aes(y=Ca), shape=21, fill="red", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Mg), shape=21, fill="blue", color="black", size=4, stroke=1.5) +
geom_point(aes(y=Na), shape=21, fill="gray30", color="black", size=4, stroke=1.5)
# Use 'tidyverse' to reshape the data  ---------------
soil.nut <- pivot_longer(soil, cols=c("Ca","Mg","Na"), names_to="nutrient",values_to = "value" )
soil.nut
ggplot(soil.nut) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
######
# or if we wanted to plot different nutrients...
soil.nut2 <- pivot_longer(soil, cols=c("Ca","Mg","K"), names_to="nutrient",values_to = "value" )
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient), shape=21, color="black", size=4, stroke=1.5)
##########
# plot with facets, scales, and themes!
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
facet_wrap(~nutrient, scales="free_y") +
labs(y="mg / 100 g soil") +
theme_bw() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
############
# Playing with colors in ggplot!
display.brewer.all()
#########
# Choose a new color palette from the RColorBrewer package
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5) +
theme_classic() +
labs(y="Ca (mg/100g soil)") +
scale_fill_brewer(palette="YlOrBr", name="Depth (cm)")
#########
# Choose your own palette!
ggplot(soil) +
geom_point(aes(x=pH, y=Ca, fill=Depth), shape=21, color="black", size=4, stroke=1.5) +
theme_bw() +
ylab("Ca (mg/100g soil)") +
scale_fill_manual(values=c("#FFF0BF","#FFC300","#BF9200","#604900"), name="Depth (cm)")
##########
# add trendlines
ggplot(soil.nut2) +
geom_point(aes(x=pH, y=value, fill=nutrient),
shape=21, color="black", size=4, stroke=1.5) +
geom_smooth(aes(x=pH, y=value), method="lm", color="black") +
facet_wrap(~nutrient, scales="free_y") +
ylab("mg / 100 g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
###########
# Adding density/smooth curves to plots
## first produce some histograms
ggplot(soil.nut) +
geom_histogram(aes(x=value), color="black", fill="white", bins=15) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
########
# Then add density curves
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
geom_density(aes(x=value,color=nutrient), size=1.5) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
###########
# And now let's use a statistical function (dnorm) in ggplot to compare with a normal distribution:
ggplot(soil.nut) +
geom_histogram(aes(x=value, y=..density..), color="black", fill="white", bins=15) +
stat_function(fun = dnorm, color = "blue", size = 1.5,
args=list(mean=mean(soil.nut$value), sd=sd(soil.nut$value))) +
facet_wrap(~nutrient, scales="free") +
xlab("mg / 100g soil") +
theme_classic() +
theme(legend.position="none",
axis.text = element_text(size=20),
axis.title = element_text(size=25),
strip.text = element_text(size=25, face="bold"))
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot()
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot() +
stat_boxplot(geom="errorbar", width=0.2)
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun.y=mean, geom="point", size=5, color="black")
?stat_summary
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun=mean, size=5, color="black")
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun=mean, size=1, color="black")
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun=mean, geom="point",size=1, color="black")
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun=mean)
#######
# add error bars and other stat summaries (e.g., mean) to boxplot
ggplot(soil, aes(x=Contour, y=pH)) +
stat_boxplot(geom="errorbar", width=0.2) +
stat_boxplot() +
stat_summary(fun=mean,geom="point",size=5, color="black")
leaflet(possumsites) %>%
addTiles() %>% #Adds map tiles from OpenStreetMap
addMarkers(lng=c(possumsites$Longitude), lat=c(possumsites$Latitude),
popup=c(as.character(possumsites$altitude))) #Adds markers for the sites
library(leaflet)
library(leaflet)
leaflet(possumsites) %>%
addTiles() %>% #Adds map tiles from OpenStreetMap
addMarkers(lng=c(possumsites$Longitude), lat=c(possumsites$Latitude),
popup=c(as.character(possumsites$altitude))) #Adds markers for the sites
possumsites
ggplot(soil) +
geom_point(aes(pH, Ca, fill=Depth), shape=21, color='black', size=4, stroke=1.5) +
geom_smooth(method='lm', aes(pH, Ca, color=Depth), se=FALSE) +
theme_bw() +
ylab('Ca (mg/100g soil)') +
scale_fill_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'), name='Depth (cm)') +
scale_color_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'))
ggplot(soil) +
geom_point(aes(pH, Ca, fill=Depth), shape=21, color='black', size=4, stroke=1.5) +
geom_smooth(method='lm', aes(pH, Ca, color=Depth), se=FALSE) +
theme_bw() +
ylab('Ca (mg/100g soil)') +
scale_fill_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'), name='Depth (cm)') +
scale_color_manual(values=c('#FFF0BF','#FFC300','#BF9200','#604900'))
ggplot(soil.nut) +
geom_boxplot(aes(nutrient, value, fill=Contour)) +
stat_summary(aes(nutrient, value),
fun=mean, geom="point", shape=18, size=4, color='black')
ggplot(soil.nut) +
geom_density(aes(x=value, fill=nutrient), color="black", alpha=0.5) +
xlab("mg / 100g soil") +
theme_dark() +
theme(axis.text = element_text(size=14),
axis.title = element_text(size=16),
strip.text = element_text(size=16, face="bold"))
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
library(lubridate)
#  Import data as a Tibble dataframe and take a quick glance at the data -----------------------------
# import meteorological data from Hungry Horse (HH) and Polson Kerr (PK) dams as tibble dataframe using readr
clim_data <- read_csv("MTMetStations.csv")
# display tibble - note nice formatting and variable info, entire dataset is not displayed as is case in read.csv
clim_data
# display the last few lines of the data frame
tail(clim_data)
# display the last few lines of the data frame
tail(clim_data)
# look at clim_data -- is it in tidy format? What do we need to do to get it there?
head(clim_data)
# look at clim_data -- is it in tidy format? What do we need to do to get it there?
head(clim_data)
View(clim_data)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
#  R Bootcamp #1, Module 4---------------------------------------
#       University of Nevada, Reno
#       Data wrangling!
# load packages ---------------------------
library(tidyverse)
library(lubridate)
#  Import data as a Tibble dataframe and take a quick glance at the data -----------------------------
# import meteorological data from Hungry Horse (HH) and Polson Kerr (PK) dams as tibble dataframe using readr
clim_data <- read_csv("MTMetStations.csv")
# quick look at the contents
clim_data
# display the last few lines of the data frame (often useful to check!)
tail(clim_data)
#  Use Tidyr verbs to make data 'tidy' ---------------------------
# look at clim_data -- is it in tidy format? What do we need to do to get it there?
head(clim_data)
# step 1: pivot this data frame into long format:
#    we will create a new column called 'climvar_station', and all of the numeric precip and temp values into a column called 'value'.
clim_vars_longer <- clim_data %>% pivot_longer(
cols = !Date,
names_to = "climvar_station",
values_to = "value"
)
clim_vars_longer
# step 2: separate the climvar_station column into two separate columns that identify the climate variable and the station
clim_vars_separate <- clim_vars_longer %>% separate(
col = climvar_station,
into = c("Station","climvar")
)
clim_vars_separate
# step 3: pivot_wider distributes the clim_var column into separate columns, with the data values from the 'value' column
tidy_clim_data <- clim_vars_separate %>% pivot_wider(
names_from = climvar,
values_from = value
)
tidy_clim_data
# repeat above as single pipe series without creation of intermediate datasets
tidy_clim_data <- clim_data %>%
pivot_longer(cols = !Date,
names_to = "climvar_station",
values_to = "value") %>%
separate(col = climvar_station,
into = c("Station","climvar")) %>%
pivot_wider(names_from = climvar,
values_from = value)
tidy_clim_data
?summarize_at
vignette("colwise")
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
#  R Bootcamp #1, Module 4---------------------------------------
#       University of Nevada, Reno
#       Data wrangling!
# load packages ---------------------------
library(tidyverse)
library(lubridate)
#  Import data as a Tibble dataframe and take a quick glance at the data -----------------------------
# import meteorological data from Hungry Horse (HH) and Polson Kerr (PK) dams as tibble dataframe using readr
clim_data <- read_csv("MTMetStations.csv")
# quick look at the contents
clim_data
# display the last few lines of the data frame (often useful to check!)
tail(clim_data)
#  Use Tidyr verbs to make data 'tidy' ---------------------------
# look at clim_data -- is it in tidy format? What do we need to do to get it there?
head(clim_data)
# step 1: pivot this data frame into long format:
#    we will create a new column called 'climvar_station', and all of the numeric precip and temp values into a column called 'value'.
clim_vars_longer <- clim_data %>% pivot_longer(
cols = !Date,
names_to = "climvar_station",
values_to = "value"
)
clim_vars_longer
# step 2: separate the climvar_station column into two separate columns that identify the climate variable and the station
clim_vars_separate <- clim_vars_longer %>% separate(
col = climvar_station,
into = c("Station","climvar")
)
clim_vars_separate
# step 3: pivot_wider distributes the clim_var column into separate columns, with the data values from the 'value' column
tidy_clim_data <- clim_vars_separate %>% pivot_wider(
names_from = climvar,
values_from = value
)
tidy_clim_data
# repeat above as single pipe series without creation of intermediate datasets
tidy_clim_data <- clim_data %>%
pivot_longer(cols = !Date,
names_to = "climvar_station",
values_to = "value") %>%
separate(col = climvar_station,
into = c("Station","climvar")) %>%
pivot_wider(names_from = climvar,
values_from = value)
tidy_clim_data
#  Use dplyr verbs to wrangle data   ----------------------------
# example of simple data selection and summary using group_by, summarize, and mutate verbs
# take tidy_clim_data, then
# group data by station, then
# calculate summaries and put in columns with names mean.precip.in, mean.TMax.F, and mean.Tmin.F, then
# transform to metric and put in new columns mean.precip.in, mean.TMax.F, and mean.Tmin.F
station_mean1 <- tidy_clim_data %>%
group_by(Station) %>%
summarize(
mean.precip.in = mean(PrcpIN, na.rm=TRUE),
mean.TMax.F = mean(TMaxF, na.rm=TRUE),
mean.TMin.F = mean(TMinF, na.rm=TRUE)) %>%
mutate(
mean.precip.mm = mean.precip.in * 25.4,
mean.TMax.C = (mean.TMax.F - 32) * 5 / 9,
mean.TMin.C = (mean.TMin.F - 32) * 5 / 9
)
station_mean1
